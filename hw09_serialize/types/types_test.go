package types

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_MarshalJSON(t *testing.T) {
	testCases := []struct {
		name  string
		examp Book
		got   []byte
		want  []byte
		err   error
	}{
		{
			name: "MarshalJSON 1",
			examp: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
			want: []byte{
				0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x38, 0x2c, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22,
				0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1,
				0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
				0x22, 0x3a, 0x22, 0xd0, 0x93, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0,
				0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x32, 0x30, 0x32, 0x34,
				0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34,
				0x2e, 0x32, 0x32, 0x2c, 0x22, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x7d,
			},
		},
		{
			name: "MarshalJSON 2",
			examp: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
			want: []byte{
				0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x32, 0x32, 0x2c, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22,
				0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9, 0x22, 0x2c, 0x22, 0x61,
				0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0xd0, 0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8,
				0xd0, 0xbd, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x35, 0x38, 0x32, 0x2c, 0x22, 0x73,
				0x69, 0x7a, 0x65, 0x22, 0x3a, 0x37, 0x37, 0x35, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x2e,
				0x32, 0x2c, 0x22, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x7d,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.got, tC.err = MarshalJSON(&tC.examp)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_MarshalXML(t *testing.T) {
	testCases := []struct {
		name  string
		examp Book
		got   []byte
		want  []byte
		err   error
	}{
		{
			name: "MarshalXML 1",
			examp: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
			want: []byte{
				0x3c, 0x42, 0x6f, 0x6f, 0x6b, 0x3e, 0x3c, 0x69, 0x64, 0x3e, 0x31, 0x38, 0x3c, 0x2f, 0x69, 0x64, 0x3e, 0x3c,
				0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0,
				0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0x3c, 0x2f, 0x74,
				0x69, 0x74, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0xd0, 0x93, 0xd1, 0x80, 0xd0,
				0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x3c, 0x2f, 0x61,
				0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0x3c, 0x79, 0x65, 0x61, 0x72, 0x3e, 0x32, 0x30, 0x32, 0x34, 0x3c, 0x2f,
				0x79, 0x65, 0x61, 0x72, 0x3e, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x32, 0x3c, 0x2f, 0x73, 0x69, 0x7a, 0x65,
				0x3e, 0x3c, 0x72, 0x61, 0x74, 0x65, 0x3e, 0x34, 0x2e, 0x32, 0x32, 0x3c, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x3e,
				0x3c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c, 0x2f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c,
				0x2f, 0x42, 0x6f, 0x6f, 0x6b, 0x3e,
			},
		},
		{
			name: "MarshalXML 2",
			examp: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
			want: []byte{
				0x3c, 0x42, 0x6f, 0x6f, 0x6b, 0x3e, 0x3c, 0x69, 0x64, 0x3e, 0x32, 0x32, 0x3c, 0x2f, 0x69, 0x64, 0x3e, 0x3c, 0x74,
				0x69, 0x74, 0x6c, 0x65, 0x3e, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9,
				0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0xd0, 0x9f, 0xd1,
				0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0x3c, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0x3c,
				0x79, 0x65, 0x61, 0x72, 0x3e, 0x31, 0x35, 0x38, 0x32, 0x3c, 0x2f, 0x79, 0x65, 0x61, 0x72, 0x3e, 0x3c, 0x73, 0x69,
				0x7a, 0x65, 0x3e, 0x37, 0x37, 0x35, 0x3c, 0x2f, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x3c, 0x72, 0x61, 0x74, 0x65, 0x3e,
				0x34, 0x2e, 0x32, 0x3c, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x3e, 0x3c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c,
				0x2f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c, 0x2f, 0x42, 0x6f, 0x6f, 0x6b, 0x3e,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.got, tC.err = MarshalXML(&tC.examp)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_MarshalYAML(t *testing.T) {
	testCases := []struct {
		name  string
		examp Book
		got   []byte
		want  []byte
		err   error
	}{
		{
			name: "MarshalYAML 1",
			examp: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
			want: []byte{
				0x69, 0x64, 0x3a, 0x20, 0x31, 0x38, 0xa, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x20, 0xd0, 0x94, 0xd0, 0xb5, 0xd1,
				0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0,
				0xb5, 0xd0, 0xb9, 0xa, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x20, 0xd0, 0x93, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
				0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xa, 0x79, 0x65, 0x61, 0x72, 0x3a,
				0x20, 0x32, 0x30, 0x32, 0x34, 0xa, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x32, 0xa, 0x72, 0x61, 0x74, 0x65, 0x3a,
				0x20, 0x34, 0x2e, 0x32, 0x32, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x5b, 0x5d, 0xa,
			},
		},
		{
			name: "MarshalYAML 2",
			examp: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
			want: []byte{
				0x69, 0x64, 0x3a, 0x20, 0x32, 0x32, 0xa, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x20, 0xd0, 0x94, 0xd0, 0xbe, 0xd0,
				0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9, 0xa, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x20, 0xd0,
				0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0xa, 0x79, 0x65, 0x61, 0x72, 0x3a, 0x20, 0x31,
				0x35, 0x38, 0x32, 0xa, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x37, 0x37, 0x35, 0xa, 0x72, 0x61, 0x74, 0x65, 0x3a,
				0x20, 0x34, 0x2e, 0x32, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x5b, 0x5d, 0xa,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.got, tC.err = MarshalYAML(&tC.examp)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_EncodeGOB(t *testing.T) {
	testCases := []struct {
		name  string
		examp Book
		got   bytes.Buffer
		want  bytes.Buffer
		err   error
	}{
		{
			name: "EncodeGOB 1",
			examp: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
			want: *bytes.NewBuffer([]uint8{
				0x54, 0xff, 0x81, 0x3, 0x1, 0x1, 0x4, 0x42, 0x6f, 0x6f, 0x6b, 0x1, 0xff, 0x82,
				0x0, 0x1, 0x7, 0x1, 0x2, 0x49, 0x44, 0x1, 0x4, 0x0, 0x1, 0x5, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1, 0xc, 0x0,
				0x1, 0x6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x1, 0xc, 0x0, 0x1, 0x4, 0x59, 0x65, 0x61, 0x72, 0x1, 0x4,
				0x0, 0x1, 0x4, 0x53, 0x69, 0x7a, 0x65, 0x1, 0x4, 0x0, 0x1, 0x4, 0x52, 0x61, 0x74, 0x65, 0x1, 0x8, 0x0,
				0x1, 0x6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1, 0xa, 0x0, 0x0, 0x0, 0x45, 0xff, 0x82, 0x1, 0x24, 0x1,
				0x1b, 0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
				0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0x1, 0x14, 0xd0, 0x93, 0xd1, 0x80,
				0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x1,
				0xfe, 0xf, 0xd0, 0x1, 0x4, 0x1, 0xfb, 0xa0, 0x47, 0xe1, 0x10, 0x40, 0x0,
			}),
		},
		{
			name: "EncodeGOB 2",
			examp: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
			want: *bytes.NewBuffer([]uint8{
				0x54, 0xff, 0x81, 0x3, 0x1, 0x1, 0x4, 0x42, 0x6f, 0x6f, 0x6b, 0x1, 0xff, 0x82,
				0x0, 0x1, 0x7, 0x1, 0x2, 0x49, 0x44, 0x1, 0x4, 0x0, 0x1, 0x5, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1, 0xc, 0x0,
				0x1, 0x6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x1, 0xc, 0x0, 0x1, 0x4, 0x59, 0x65, 0x61, 0x72, 0x1, 0x4,
				0x0, 0x1, 0x4, 0x53, 0x69, 0x7a, 0x65, 0x1, 0x4, 0x0, 0x1, 0x4, 0x52, 0x61, 0x74, 0x65, 0x1, 0x8, 0x0,
				0x1, 0x6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1, 0xa, 0x0, 0x0, 0x0, 0x32, 0xff, 0x82, 0x1, 0x2c, 0x1,
				0xe, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9, 0x1, 0xc, 0xd0,
				0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0x1, 0xfe, 0xc, 0x5c, 0x1, 0xfe, 0x6,
				0xe, 0x1, 0xfb, 0xc0, 0xcc, 0xcc, 0x10, 0x40, 0x0,
			}),
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.got, tC.err = EncodeGOB(&tC.examp)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_MarshalBSON(t *testing.T) {
	testCases := []struct {
		name  string
		examp Book
		got   []byte
		want  []byte
		err   error
	}{
		{
			name: "MarshalBSON 1",
			examp: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
			want: []byte{
				0x7f, 0x0, 0x0, 0x0, 0x10, 0x69, 0x64, 0x0, 0x12, 0x0, 0x0, 0x0, 0x2, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x0, 0x1c, 0x0, 0x0, 0x0, 0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1,
				0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5,
				0xd0, 0xb9, 0x0, 0x2, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x0, 0x15, 0x0, 0x0, 0x0, 0xd0,
				0x93, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4,
				0xd0, 0xbe, 0xd0, 0xb2, 0x0, 0x10, 0x79, 0x65, 0x61, 0x72, 0x0, 0xe8, 0x7, 0x0, 0x0, 0x10,
				0x73, 0x69, 0x7a, 0x65, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1, 0x72, 0x61, 0x74, 0x65, 0x0, 0x0, 0x0,
				0x0, 0xa0, 0x47, 0xe1, 0x10, 0x40, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0, 0x0,
			},
		},
		{
			name: "MarshalBSON 2",
			examp: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
			want: []byte{
				0x6a, 0x0, 0x0, 0x0, 0x10, 0x69, 0x64, 0x0, 0x16, 0x0, 0x0, 0x0, 0x2, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x0, 0xf, 0x0, 0x0, 0x0, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2,
				0xd0, 0xbe, 0xd0, 0xb9, 0x0, 0x2, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x0, 0xd, 0x0, 0x0,
				0x0, 0xd0, 0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0x0, 0x10,
				0x79, 0x65, 0x61, 0x72, 0x0, 0x2e, 0x6, 0x0, 0x0, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x0, 0x7,
				0x3, 0x0, 0x0, 0x1, 0x72, 0x61, 0x74, 0x65, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xcc, 0xcc, 0x10,
				0x40, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0, 0x0,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.got, tC.err = MarshalBSON(&tC.examp)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_UnmarshalJSON(t *testing.T) {
	testCases := []struct {
		name  string
		examp []byte
		got   Book
		want  Book
		err   error
	}{
		{
			name: "UnmarshalJSON 1",
			examp: []byte{
				0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x38, 0x2c, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22,
				0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1,
				0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
				0x22, 0x3a, 0x22, 0xd0, 0x93, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0,
				0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x32, 0x30, 0x32, 0x34,
				0x2c, 0x22, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34,
				0x2e, 0x32, 0x32, 0x2c, 0x22, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x7d,
			},
			want: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
		},
		{
			name: "UnmarshalJSON 2",
			examp: []byte{
				0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x32, 0x32, 0x2c, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3a, 0x22,
				0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9, 0x22, 0x2c, 0x22, 0x61,
				0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0xd0, 0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8,
				0xd0, 0xbd, 0x22, 0x2c, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x31, 0x35, 0x38, 0x32, 0x2c, 0x22, 0x73,
				0x69, 0x7a, 0x65, 0x22, 0x3a, 0x37, 0x37, 0x35, 0x2c, 0x22, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x34, 0x2e,
				0x32, 0x2c, 0x22, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x7d,
			},
			want: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.err = UnmarshalJSON(tC.examp, &tC.got)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_UnmarshalXML(t *testing.T) {
	testCases := []struct {
		name  string
		examp []byte
		got   Book
		want  Book
		err   error
	}{
		{
			name: "UnmarshalXML 1",
			want: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
				Sample: []byte{},
			},
			examp: []byte{
				0x3c, 0x42, 0x6f, 0x6f, 0x6b, 0x3e, 0x3c, 0x69, 0x64, 0x3e, 0x31, 0x38, 0x3c, 0x2f, 0x69, 0x64, 0x3e, 0x3c,
				0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0,
				0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0x3c, 0x2f, 0x74,
				0x69, 0x74, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0xd0, 0x93, 0xd1, 0x80, 0xd0,
				0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x3c, 0x2f, 0x61,
				0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0x3c, 0x79, 0x65, 0x61, 0x72, 0x3e, 0x32, 0x30, 0x32, 0x34, 0x3c, 0x2f,
				0x79, 0x65, 0x61, 0x72, 0x3e, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x32, 0x3c, 0x2f, 0x73, 0x69, 0x7a, 0x65,
				0x3e, 0x3c, 0x72, 0x61, 0x74, 0x65, 0x3e, 0x34, 0x2e, 0x32, 0x32, 0x3c, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x3e,
				0x3c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c, 0x2f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c,
				0x2f, 0x42, 0x6f, 0x6f, 0x6b, 0x3e,
			},
		},
		{
			name: "UnmarshalXML 2",
			want: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
				Sample: []byte{},
			},
			examp: []byte{
				0x3c, 0x42, 0x6f, 0x6f, 0x6b, 0x3e, 0x3c, 0x69, 0x64, 0x3e, 0x32, 0x32, 0x3c, 0x2f, 0x69, 0x64, 0x3e, 0x3c, 0x74,
				0x69, 0x74, 0x6c, 0x65, 0x3e, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9,
				0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0xd0, 0x9f, 0xd1,
				0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0x3c, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3e, 0x3c,
				0x79, 0x65, 0x61, 0x72, 0x3e, 0x31, 0x35, 0x38, 0x32, 0x3c, 0x2f, 0x79, 0x65, 0x61, 0x72, 0x3e, 0x3c, 0x73, 0x69,
				0x7a, 0x65, 0x3e, 0x37, 0x37, 0x35, 0x3c, 0x2f, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x3c, 0x72, 0x61, 0x74, 0x65, 0x3e,
				0x34, 0x2e, 0x32, 0x3c, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x3e, 0x3c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c,
				0x2f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3e, 0x3c, 0x2f, 0x42, 0x6f, 0x6f, 0x6b, 0x3e,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.err = UnmarshalXML(tC.examp, &tC.got)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_UnmarshalYAML(t *testing.T) {
	testCases := []struct {
		name  string
		examp []byte
		got   Book
		want  Book
		err   error
	}{
		{
			name: "UnmarshalYAML 1",
			want: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
				Sample: []byte{},
			},
			examp: []byte{
				0x69, 0x64, 0x3a, 0x20, 0x31, 0x38, 0xa, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x20, 0xd0, 0x94, 0xd0, 0xb5, 0xd1,
				0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0,
				0xb5, 0xd0, 0xb9, 0xa, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x20, 0xd0, 0x93, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
				0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xa, 0x79, 0x65, 0x61, 0x72, 0x3a,
				0x20, 0x32, 0x30, 0x32, 0x34, 0xa, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x32, 0xa, 0x72, 0x61, 0x74, 0x65, 0x3a,
				0x20, 0x34, 0x2e, 0x32, 0x32, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x5b, 0x5d, 0xa,
			},
		},
		{
			name: "UnmarshalYAML 2",
			want: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
				Sample: []byte{},
			},
			examp: []byte{
				0x69, 0x64, 0x3a, 0x20, 0x32, 0x32, 0xa, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x20, 0xd0, 0x94, 0xd0, 0xbe, 0xd0,
				0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9, 0xa, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a, 0x20, 0xd0,
				0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0xa, 0x79, 0x65, 0x61, 0x72, 0x3a, 0x20, 0x31,
				0x35, 0x38, 0x32, 0xa, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x37, 0x37, 0x35, 0xa, 0x72, 0x61, 0x74, 0x65, 0x3a,
				0x20, 0x34, 0x2e, 0x32, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x5b, 0x5d, 0xa,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.err = UnmarshalYAML(tC.examp, &tC.got)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_DecodeGOB(t *testing.T) {
	testCases := []struct {
		name  string
		examp bytes.Buffer
		got   Book
		want  Book
		err   error
	}{
		{
			name: "DecodeGOB 1",
			want: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
			examp: *bytes.NewBuffer([]uint8{
				0x54, 0xff, 0x81, 0x3, 0x1, 0x1, 0x4, 0x42, 0x6f, 0x6f, 0x6b, 0x1, 0xff, 0x82,
				0x0, 0x1, 0x7, 0x1, 0x2, 0x49, 0x44, 0x1, 0x4, 0x0, 0x1, 0x5, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1, 0xc, 0x0,
				0x1, 0x6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x1, 0xc, 0x0, 0x1, 0x4, 0x59, 0x65, 0x61, 0x72, 0x1, 0x4,
				0x0, 0x1, 0x4, 0x53, 0x69, 0x7a, 0x65, 0x1, 0x4, 0x0, 0x1, 0x4, 0x52, 0x61, 0x74, 0x65, 0x1, 0x8, 0x0,
				0x1, 0x6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1, 0xa, 0x0, 0x0, 0x0, 0x45, 0xff, 0x82, 0x1, 0x24, 0x1,
				0x1b, 0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
				0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb9, 0x1, 0x14, 0xd0, 0x93, 0xd1, 0x80,
				0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x1,
				0xfe, 0xf, 0xd0, 0x1, 0x4, 0x1, 0xfb, 0xa0, 0x47, 0xe1, 0x10, 0x40, 0x0,
			}),
		},
		{
			name: "DecodeGOB 2",
			want: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
			examp: *bytes.NewBuffer([]uint8{
				0x54, 0xff, 0x81, 0x3, 0x1, 0x1, 0x4, 0x42, 0x6f, 0x6f, 0x6b, 0x1, 0xff, 0x82,
				0x0, 0x1, 0x7, 0x1, 0x2, 0x49, 0x44, 0x1, 0x4, 0x0, 0x1, 0x5, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x1, 0xc, 0x0,
				0x1, 0x6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x1, 0xc, 0x0, 0x1, 0x4, 0x59, 0x65, 0x61, 0x72, 0x1, 0x4,
				0x0, 0x1, 0x4, 0x53, 0x69, 0x7a, 0x65, 0x1, 0x4, 0x0, 0x1, 0x4, 0x52, 0x61, 0x74, 0x65, 0x1, 0x8, 0x0,
				0x1, 0x6, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1, 0xa, 0x0, 0x0, 0x0, 0x32, 0xff, 0x82, 0x1, 0x2c, 0x1,
				0xe, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb9, 0x1, 0xc, 0xd0,
				0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0x1, 0xfe, 0xc, 0x5c, 0x1, 0xfe, 0x6,
				0xe, 0x1, 0xfb, 0xc0, 0xcc, 0xcc, 0x10, 0x40, 0x0,
			}),
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.err = DecodeGOB(tC.examp, &tC.got)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}

func Test_UnmarshalBSON(t *testing.T) {
	testCases := []struct {
		name  string
		examp []byte
		got   Book
		want  Book
		err   error
	}{
		{
			name: "UnmarshalBSON 1",
			want: Book{
				ID:     18,
				Title:  "Дети родителей",
				Author: "Грибоводов",
				Year:   2024,
				Size:   2,
				Rate:   4.22,
			},
			examp: []byte{
				0x7f, 0x0, 0x0, 0x0, 0x10, 0x69, 0x64, 0x0, 0x12, 0x0, 0x0, 0x0, 0x2, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x0, 0x1c, 0x0, 0x0, 0x0, 0xd0, 0x94, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd1,
				0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5,
				0xd0, 0xb9, 0x0, 0x2, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x0, 0x15, 0x0, 0x0, 0x0, 0xd0,
				0x93, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4,
				0xd0, 0xbe, 0xd0, 0xb2, 0x0, 0x10, 0x79, 0x65, 0x61, 0x72, 0x0, 0xe8, 0x7, 0x0, 0x0, 0x10,
				0x73, 0x69, 0x7a, 0x65, 0x0, 0x2, 0x0, 0x0, 0x0, 0x1, 0x72, 0x61, 0x74, 0x65, 0x0, 0x0, 0x0,
				0x0, 0xa0, 0x47, 0xe1, 0x10, 0x40, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0, 0x0,
			},
		},
		{
			name: "UnmarshalBSON 2",
			want: Book{
				ID:     22,
				Title:  "Домовой",
				Author: "Пушкин",
				Year:   1582,
				Size:   775,
				Rate:   4.2,
			},
			examp: []byte{
				0x6a, 0x0, 0x0, 0x0, 0x10, 0x69, 0x64, 0x0, 0x16, 0x0, 0x0, 0x0, 0x2, 0x74, 0x69, 0x74, 0x6c,
				0x65, 0x0, 0xf, 0x0, 0x0, 0x0, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb2,
				0xd0, 0xbe, 0xd0, 0xb9, 0x0, 0x2, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x0, 0xd, 0x0, 0x0,
				0x0, 0xd0, 0x9f, 0xd1, 0x83, 0xd1, 0x88, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0x0, 0x10,
				0x79, 0x65, 0x61, 0x72, 0x0, 0x2e, 0x6, 0x0, 0x0, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x0, 0x7,
				0x3, 0x0, 0x0, 0x1, 0x72, 0x61, 0x74, 0x65, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xcc, 0xcc, 0x10,
				0x40, 0xa, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0, 0x0,
			},
		},
	}
	for _, tC := range testCases {
		t.Run(tC.name, func(t *testing.T) {
			tC.err = UnmarshalBSON(tC.examp, &tC.got)
			assert.Equal(t, tC.want, tC.got, tC.err)
		})
	}
}
